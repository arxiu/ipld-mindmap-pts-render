{"version":3,"sources":["PtsCanvas.jsx","IpldType.js","LinkType.js","LinkWrapType.js","NodeType.js","Shape.js","Paint.js","Now.js","Burl.js","BurlSelection.js","OriginParents.js","IpfsController.js","PtsRender.js","InvisibleInput.jsx","App.js","serviceWorker.js","index.js"],"names":["PtsCanvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvRef","React","createRef","space","form","pressingTimeout","state","isPressing","isLongPress","touchStartTimestamp","pressStartPointer","document","addEventListener","onVisibilityChange","bind","assertThisInitialized","_create","_loop","e","a","visibilityState","resume","pause","loop","play","playOnce","time","ftime","bound","size","evt","type","px","py","CanvasSpace","onCanvasReady","setup","bgcolor","background","resize","retina","getForm","add","bindMouse","bindTouch","onPressTimeReached","onPinchStart","onPinchMove","onPinchEnd","clearTimeout","setTimeout","longPressDelay","onPressStart","pointer","setState","Math","abs","$subtract","magnitude","onLongPressStart","onPressEnd","onLongPressEnd","_this2","react_default","createElement","TapAndPinchable_default","style","touchAction","stopPropagation","preventDefault","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","className","name","height","onContextMenu","ref","c","Component","defaultProps","IpldType","CID","require","CIDTool","LinkType","obj","isLink","Error","_link","format","err","cid","LinkWrapType","isLinkWrap","_wrap","link","logError","arguments","length","undefined","console","error","getNewObj","NodeType","nodeCid","isNode","_origin","origin","_relations","_targetCids","_nodeCid","relations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","r","value","_addRelation","return","relation","RelationType","push","target","tid","indexOf","newOrigin","newNode","clone","newTarget","newType","relationObj","oldTarget","oldType","i","splice","warn","oid","targets","targetCids","Array","isArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","isRelation","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","node","toObj","_target","_type","typeId","Shape","originPt","destPt","sharpness","offsetPt","unit","$unit","multiply","sideVertex1","Pt","y","x","sideVertex2","arrow","Group","moveTo","center","extend","pt","Util","randomInt","subtract","Paint","radius","color","fillOnly","point","thickness","strokeOnly","opt","tpt","originOffset","targetOffset","line","originOffsetPt","Line","crop","targetOffsetPt","arrowLine","arrowPointer","polygon","text","multiline","font","alignText","fill","tb","Rectangle","fromCenter","paragraphBox","textBox","Now","_canReferenceNodes","_nodeRadius","_zoom","originRadius","_originRadius","_nodeArm","z","_isPressing","_clickDownBurlSelection","burlSelection","_clickUpBurlSelection","_currentBurlSelection","_currentDragBurlSelection","can","OTYPE","UNDEFINED","TEXT","IMAGE","Burl","_oid","_pt","_nodes","_fileExtension","_file","_btn","_isHover","_size","_downTimestamps","n","to","nodeRadius","onDown","onUp","onHover","onLeave","onMove","UIButton","fromCircle","on","ui","now","Date","times","isHover","file","toString","BurlSelection","burl","_burl","_node","OriginParents","_parents","IpfsController","_isReady","_ipfs","ipfs","id","then","log","isJsIpfs","isOnline","onIpfsReady","emit","ipfsId","agentVersion","callback","dag","get","result","data","files","cat","callaback","put","hashAlg","toBaseEncodedString","cidStr","codec","getCodec","EventEmitter","PtsRender","start","worldIsReady","activeCids","world","nodes","burls","parents","borningNode","selectedId","selectedRelation","selectedIdHistory","paint","onkeydown","checkKey","onBurlDown","onBurlUp","onBurlHover","onBurlLeave","onBurlMove","ipfsController","_ptsToDraw","nextProps","onZoomChange","zoom","canReferenceNodes","JSON","stringify","cids","isReady","setCids","prevProps","init","loadCID","newBurl","isDag","loadDag","onCidLoaded","createNode","createIPLD","loadFile","addBurlToWorld","setActiveCids","particle","_this3","initPt","randomPt","borningNodeCid","borningNodePt","makeParticle","b","setInteraction","op","Particle","nodeArm","nid","addParent","addNode","removeBurl","upSelection","hoverSelection","downSelection","removeParticle","getBurlSelection","dragSelection","checkBorningRelation","closest","getClosestNodeRelationToPointer","nearbyNode","nodeDistance","distance","originDistance","closestNode","closestDistance","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","getTargetPt","circle","Circle","pts","intersectLine2D","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","setZoom","toAll","World","innerBound","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","getTargetFinalOrigin","force","$multiply","addForce","bubbleOutline","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","paintNodeTree","updateAction","UI","track","btn","_this4","moveDragBurl","autoLayout","addForces","update","paintBorningNode","paintAll","paintFocusTree","paintBorningRelation","isDebug","drawParticles","p","fnc","onlyActive","hasOwnProperty","hasTarget","addRelation","originSelection","targetSelection","_this5","getBurlSelectionId","addRelationToNode","addRelationToContent","addRelationFork","updateNode","onNewNode","addIPLDObj","oldNode","removeNode","newNodeObj","_this6","newNid","onReplaceCid","replaceBurlNode","oldNodeParents","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","oldParentNid","oldParent","newParent","removeRelationFork","sonOldNid","sonNewNid","_this7","originParents","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","parentNid","parentNode","oldNid","bubbleUpUpdate","_iterator9","rootCids","prevActiveCids","allCids","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","assign","getLeaveCids","rootCid","_this8","borningNodeText","bubble","targetRadius","newId","pop","jumps","currentN","currentIndex","getRelationIndex","nextIndex","relationships","relationship","destinationNode","findIndex","window","event","keyCode","selectNewId","selectPreviousId","selectNextRelation","level","onNode","onContent","onRelation","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","treeDown","that","hasPreview","preview","bubbleDownFromCids","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","InvisibleInput","isMobileOrTablet","shiftKey","onReturn","check","navigator","userAgent","vendor","opera","test","substr","newText","onChange","hide","position","zIndex","getZIndex","input","nameInput","autoFocus","Buffer","App","pauseAnimation","currentZoom","lastZoom","src","replaceCid","addTextOrigin","resolveIPNS","onHashChanged","getIpfs","checkHash","catch","parsedHash","QueryString","parse","location","hash","loadProperties","loadSrc","onAdded","path","content","from","cidToRemove","cidToAdd","index","toConsumableArray","addIpldObj","addCID","makeHash","hashObj","newHash","concat","save","publish","res","resolve","ipns","replace","variance","zoomDelta","mousePosition","hasFocus","InvisibleInput_InvisibleInput","onInputChange","onInputReturn","invisibleInput","getInvisibleInput","onClick","handleClick","PtsRender_PtsRender","Boolean","hostname","match","ReactDOM","render","App_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.360a1bd3.chunk.js","sourcesContent":["import React from 'react';\n\n// For ES5 builds, import from 'pts/dist/es5'. For ES6 or custom builds, import from 'pts'.\nimport { CanvasSpace } from 'pts';\n//var Hammer = require('react-hammerjs');\nimport TapAndPinchable from 'react-tappable/lib/TapAndPinchable';\n\nexport default class PtsCanvas extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.canvRef = React.createRef();\n    this.space = null;\n    this.form = null;\n    this.pressingTimeout = null\n    this.state = {\n      isPressing: false,\n      isLongPress: false,\n      touchStartTimestamp: 0,\n      pressStartPointer: null,\n    }\n\n    document.addEventListener('visibilitychange', this.onVisibilityChange.bind(this));\n\n  }\n\n  componentDidMount() {\n    this._create();\n    this._loop();\n  }\n\n  componentDidUpdate() {\n    this._loop();\n  }\n\n  onVisibilityChange(e, a) {\n    if (document.visibilityState == 'visible')\n      this.space.resume()\n    else\n      this.space.pause()\n  }\n\n  _loop() {\n    if (this.props.loop) {\n      this.space.play();\n    } else {\n      this.space.playOnce(0);\n    }\n  }\n\n  // Required: Override this to use Pts' player `animate` callback\n  // See guide: https://ptsjs.org/guide/space-0500\n  animate(time, ftime) { }\n\n  // Optional: Override this to use Pts' player `start` callback\n  start(space, bound) { }\n\n\n  // Optional: Override this to use Pts' player `resize` callback\n  resize(size, evt) { }\n\n\n  // Optional: Override this to use Pts' player `action` callback\n  action(type, px, py, evt) { }\n\n\n  _create() {\n    this.space = new CanvasSpace(this.canvRef, this.onCanvasReady).setup({\n      bgcolor: this.props.background,\n      resize: true,\n      retina: true\n    });\n\n    this.form = this.space.getForm();\n    this.space.add(this);\n    this.space.bindMouse().bindTouch();\n    this.onPressTimeReached = this.onPressTimeReached.bind(this)\n  }\n\n  onCanvasReady() {\n    //overwritten by sub class\n  }\n\n  onPinchStart(e) {\n    if (this.props.onPinchStart)\n      this.props.onPinchStart(e)\n  }\n\n  onPinchMove(e) {\n    if (this.props.onPinchMove)\n      this.props.onPinchMove(e)\n  }\n\n  onPinchEnd(e) {\n    if (this.props.onPinchEnd)\n      this.props.onPinchEnd(e)\n  }\n\n  onTouchStart(e) {\n    if (this.pressingTimeout)\n      clearTimeout(this.pressingTimeout)\n    this.pressingTimeout = setTimeout(this.onPressTimeReached, this.props.longPressDelay)\n    // this.setState({ touchStartTimestamp: Date.now() })\n    if (this.props.onPressStart)\n      this.props.onPressStart(this.space.pointer)\n\n    this.setState({ isPressing: true, pressStartPointer: this.space.pointer })\n  }\n\n  onPressTimeReached() {\n    if (!this.state.isPressing)\n      return\n    let distanceMoved = Math.abs(this.space.pointer.$subtract(this.state.pressStartPointer).magnitude())\n\n    if (distanceMoved < 5)\n      this.onLongPressStart()\n  }\n\n  onLongPressStart() {\n    if (this.props.onLongPressStart)\n      this.props.onLongPressStart(this.space.pointer)\n    this.setState({ isLongPress: true })\n  }\n\n  onTouchEnd(e) {\n    if (this.props.onPressEnd)\n      this.props.onPressEnd(this.space.pointer)\n\n    if (this.state.isLongPress) {\n      if (this.props.onLongPressEnd)\n        this.props.onLongPressEnd()\n    }\n    this.setState({ isPressing: false, isLongPress: false })\n  }\n\n  render() {\n    return (\n\n      <TapAndPinchable\n        style={{ touchAction: 'none' }}\n        stopPropagation={true}\n        preventDefault={true}\n        onPinchMove={this.onPinchMove.bind(this)}\n        onPinchStart={this.onPinchStart.bind(this)}\n        onPinchEnd={this.onPinchEnd.bind(this)}\n        onTouchStart={this.onTouchStart.bind(this)}\n        onTouchEnd={this.onTouchEnd.bind(this)}\n        onMouseDown={this.onTouchStart.bind(this)}\n        onMouseUp={this.onTouchEnd.bind(this)}\n      //onPress={this.onPress.bind(this).bind('contextmenu', function (e) { return false })}\n      //pressDelay={this.props.pressDelay}\n      >\n\n        <div className={this.props.name || \"\"}>\n          <canvas\n            height={800}\n            onContextMenu={(e) => { e.preventDefault() }}\n            ref={c => (this.canvRef = c)}></canvas>\n        </div>\n      </TapAndPinchable>\n\n    );\n  }\n}\n\n\nPtsCanvas.defaultProps = {\n  name: \"pt\", // maps to className of the container div\n  background: \"#ff0\",\n  resize: true,\n  retina: true,\n  loop: true\n}","export default class IpldType {\n   \n}","const CID = require('cids')\nconst CIDTool = require('cid-tool')\n\nexport default class LinkType {\n    \n    constructor(obj) {\n        if (!LinkType.isLink(obj))\n            throw (new Error('Object is not a valid link', obj))\n\n        this._link = CIDTool.format(obj['/'])\n    }\n\n    get link() {\n        return this._link\n    }\n\n    static isLink(obj) {\n\n        if (!obj)\n            return false\n\n        if (!obj['/'])\n            return false\n\n        try {\n            new CID(obj['/'])\n        }\n        catch (err) {\n            return false\n        }\n\n        return true\n    }\n\n    static getNewObj(cid)\n    {\n        const obj = {}\n        obj['/'] = cid\n        return obj\n    }\n}","import LinkType from \"./LinkType\"\n\nexport default class LinkWrapType {\n\n    constructor(obj) {\n        if (!LinkWrapType.isLinkWrap(obj))\n            throw (new Error('Object is no LinkWrap Type'))\n\n        this._wrap = new LinkType(obj.link)\n    }\n\n    get link() {\n        return this._wrap.link\n    }\n\n    get wrap() {\n        return this._wrap\n    }\n\n    static isLinkWrap(obj, logError = true) {\n        if (!obj) {\n            if (logError)\n                console.error('LinkWrapType: !obj', obj)\n\n            return false\n        }\n\n        if (!obj.link) {\n            if (logError)\n                console.error('LinkWrapType: !obj.link', obj)\n\n            return false\n        }\n\n        if (!LinkType.isLink(obj.link)) {\n            if (logError)\n                console.error('LinkWrapType: !LinkType.isLink(obj.link)', obj)\n            return false\n        }\n\n        return true\n    }\n\n    static getNewObj(link) {\n        const obj = {}\n        obj.link = LinkType.getNewObj(link)\n        return obj\n    }\n\n}","import IpldType from \"./IpldType\"\nimport LinkWrapType from \"./LinkWrapType\"\n\nexport default class NodeType extends IpldType {\n    constructor(obj, nodeCid = null) {\n        if (!NodeType.isNode(obj))\n            throw (new Error('Object is not a valid NodeType'))\n\n        super(obj)\n\n        this._origin = new LinkWrapType(obj.origin)\n        this._relations = []\n        this._targetCids = []\n        this._nodeCid = nodeCid\n\n        if (obj.relations) {\n            for (let r of obj.relations) {\n                this._addRelation(r)\n            }\n        }\n    }\n\n    get nodeCid() {\n        //TODO: this should be mandatory or not be here\n        return this._nodeCid\n    }\n\n    /*set nodeCid(nid) {\n        //TODO: this shoul not  exist\n        this._nodeCid = nid\n    }*/\n\n\n    _addRelation(r) {\n        let relation = new RelationType(r)\n        this._relations.push(relation)\n        this._targetCids.push(relation.target.link)\n    }\n\n    get origin() {\n        return this._origin\n    }\n\n    get relations() {\n        return this._relations\n    }\n\n    get targetCids() {\n        return this._targetCids\n    }\n\n    hasTarget(tid) {\n        return this._targetCids.indexOf(tid) !== -1\n    }\n\n    newOriginFork(newOrigin) {\n        let newNode = NodeType.clone(this)\n\n        newNode._origin = new LinkWrapType(LinkWrapType.getNewObj(newOrigin))\n        \n        return newNode\n    }\n\n    addRelationFork(newTarget, newType) {\n        let newNode = NodeType.clone(this)\n        let relationObj = RelationType.getNewObj(newTarget, newType)\n        newNode._addRelation(relationObj)\n        return newNode\n    }\n\n    removeRelationFork(oldTarget, oldType = null) {\n        let newNode = NodeType.clone(this)\n        for (let i = 0; i <= newNode._relations.length; i++) {\n            let r = newNode._relations[i]\n            if (r.target.link === oldTarget) {\n                if (r.type) {\n\n                    if (r.type.link === oldTarget) {\n                        newNode._relations.splice(i, 1)\n                        newNode._targetCids.splice(i, 1)\n                        return newNode\n                    }\n                }\n                else {\n                    newNode._relations.splice(i, 1)\n                    newNode._targetCids.splice(i, 1)\n                    return newNode\n                }\n            }\n        }\n        console.warn('No match for removeRelationFork', oldTarget, oldType, this)\n        return newNode\n    }\n\n    static isNode(obj, logError = false) {\n        if (!obj) {\n            if (logError)\n                console.error('Node: !obj')\n            return false\n        }\n\n        if (!obj.origin) {\n            if (logError)\n                console.error('Node: !obj.origin')\n            return false\n        }\n\n        if (!LinkWrapType.isLinkWrap(obj.origin)) {\n            if (logError)\n                console.error('Node: !LinkWrapType.isLinkWrap(obj.origin)')\n            return false\n        }\n\n        //it may not have relations but if they do they must be right\n        if (obj.relations) {\n            if (!Array.isArray(obj.relations)) {\n                if (logError)\n                    console.error('Node: !Array.isArray(obj.relations)')\n                return false\n            }\n\n            for (let r of obj.relations) {\n                if (!RelationType.isRelation(r)) {\n                    if (logError)\n                        console.error('!RelationType.isRelation(r)')\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    toObj() {\n        let oid = this.origin.link\n        let targets = this.targetCids\n        return NodeType.getNewObj(oid, targets)\n    }\n\n    //Brand new object from oid and target\n    static getNewObj(oid, targets) {\n        const obj = {}\n        obj.origin = LinkWrapType.getNewObj(oid)\n        obj.relations = []\n        for (let tid of targets) {\n            let r = RelationType.getNewObj(tid)\n            obj.relations.push(r)\n        }\n        return obj\n    }\n\n    static clone(node) {\n        let clone = new NodeType(node.toObj())\n        clone._nodeCid = null\n        return clone\n    }\n\n}\n\nclass RelationType {\n    constructor(obj) {\n        if (!RelationType.isRelation(obj))\n            throw (new Error('Object is not a valid RelationType'))\n\n        this._target = new LinkWrapType(obj.target)\n\n        if (obj.type)\n            this._type = obj.type\n        else\n            this._type = null\n    }\n\n    get target() {\n        return this._target\n    }\n\n    get type() {\n        return this._type\n    }\n\n    static isRelation(obj) {\n        if (!obj)\n            return false\n\n        if (!obj.target)\n            return false\n\n        if (!LinkWrapType.isLinkWrap(obj.target))\n            return false\n\n        return true\n    }\n\n    static getNewObj(tid, typeId) {\n        const obj = {}\n        obj.target = LinkWrapType.getNewObj(tid)\n        if (typeId)\n            obj.type = LinkWrapType.getNewObj(typeId)\n        return obj\n    }\n}","import { Pt, Group, Util } from 'pts';\n\nexport default class Shape {\n    static arrowPointer(originPt, destPt, length = 10, sharpness = 0.3) {\n        let pointer = destPt.$subtract(originPt)\n        let offsetPt = destPt\n        if (pointer.magnitude()) {\n            pointer.unit()\n            offsetPt = pointer.$unit().add(destPt)\n        }\n        pointer.multiply(length)\n        let sideVertex1 = new Pt(pointer.y, -pointer.x).multiply(sharpness)\n        let sideVertex2 = new Pt(-pointer.y, pointer.x).multiply(sharpness)\n        let arrow = new Group(pointer, sideVertex1, sideVertex2)\n        arrow.moveTo(offsetPt)\n        return arrow\n    }\n\n    static randomPt(center, extend = 100) {\n        let pt = new Pt([Util.randomInt(extend), Util.randomInt(extend)])\n        pt.add(center).subtract(extend * 0.5)\n        return pt\n    }\n}","import { Group, Rectangle, Line, Pt } from 'pts';\nimport Shape from './Shape'\n\nexport default class Paint {\n    constructor(form) {\n        this.form = form\n    }\n\n    bubble(pt, radius = 30, color = '#eee') {\n        this.form.fillOnly(color)\n        this.form.point(pt, radius, 'circle')\n    }\n\n    bubbleOutline(pt, radius = 30, color = \"#f36\", thickness = 2) {\n        this.form.strokeOnly(color, thickness)\n        this.form.point(pt, radius, 'circle')\n    }\n\n    arrow(opt, tpt, originOffset, targetOffset, color = '#000', thickness = 2) {\n        let line = new Group(opt, tpt)\n        let originOffsetPt = Line.crop(line, new Pt(originOffset, originOffset), 0)\n        let targetOffsetPt = Line.crop(line, new Pt(targetOffset, targetOffset), 1)\n\n        let arrowLine = new Group(originOffsetPt, targetOffsetPt)\n        this.form.strokeOnly(color, thickness)\n        this.form.line(arrowLine)\n\n        let arrowPointer = Shape.arrowPointer(originOffsetPt, targetOffsetPt)\n        this.form.fillOnly(color, 1)\n        this.form.polygon(arrowPointer)\n    }\n\n    text(text, opt, size, color = \"#333\", multiline = true) {\n        //font style\n        this.form.font(12).alignText(\"center\");\n        this.form.fill(color)\n        //text box\n        let tb = Rectangle.fromCenter(opt, size)\n\n        if (multiline)\n            this.form.paragraphBox(tb, text, 1.2, \"middle\", true)\n        else\n            this.form.textBox(tb, text, \"middle\", \"…\")\n    }\n\n}","export default class Now {\n\n    static nodeRadius() {\n        if(!Now._canReferenceNodes)\n            return Now.originRadius()\n\n        return Now._nodeRadius * Now._zoom\n    }\n\n    static originRadius() {\n        return Now._originRadius * Now._zoom\n    }\n\n    static nodeArm() {\n        return Now._nodeArm * Now._zoom\n    }\n\n    static setZoom(z) {\n        Now._zoom = z\n    }\n\n    static updateAction(type) {\n        if (type === 'up')\n            Now._isPressing = false\n        if (type === 'down')\n            Now._isPressing = true\n    }\n\n    static get isPressing ()\n    {\n        return Now._isPressing\n    }\n\n    static get downSelection() {\n        return Now._clickDownBurlSelection\n    }\n\n    static set downSelection(burlSelection) {\n        Now._clickDownBurlSelection = burlSelection\n    }\n\n    static get upSelection() {\n        return Now._clickUpBurlSelection\n    }\n    static set upSelection(burlSelection) {\n        Now._clickUpBurlSelection = burlSelection\n    }\n\n    static get hoverSelection() {\n        return Now._currentBurlSelection\n    }\n\n    static set hoverSelection(burlSelection) {\n        Now._currentBurlSelection = burlSelection\n    }\n\n    static get dragSelection() {\n        return Now._currentDragBurlSelection\n    }\n\n    static set dragSelection(burlSelection) {\n        Now._currentDragBurlSelection = burlSelection\n    }\n\n    static set canReferenceNodes(can)\n    {\n        Now._canReferenceNodes = can\n    }\n\n    static get canReferenceNodes()\n    {\n        return  Now._canReferenceNodes\n    }\n\n\n}\n\nNow._zoom = 1\nNow._originRadius = 50\nNow._nodeRadius = Now._originRadius * 1.2\nNow._nodeArm = 100\n\nNow._isPressing = false\n\nNow._clickDownBurlSelection = null\nNow._clickUpBurlSelection = null\nNow._currentBurlSelection = null\nNow._currentDragBurlSelection = null\nNow._canReferenceNodes = null\n\n","import { UIButton, Group, Pt } from 'pts'\nimport Now from './Now'\n\nconst OTYPE = {\n    UNDEFINED: 'undefined',\n    TEXT: 'text',\n    IMAGE: 'image'\n}\n\nexport default class Burl {\n\n    constructor(oid, pt) {\n        this._oid = oid\n        this._pt = pt\n        this._nodes = []\n        this._fileExtension = OTYPE.UNDEFINED\n        this._file = null\n        this._btn = null\n        this._isHover = false\n        this._size = new Pt(Now.originRadius(), Now.originRadius())\n        this._downTimestamps = []\n    }\n\n    get oid() {\n        return this._oid\n    }\n\n    get pt() {\n        return this._pt\n    }\n\n    get nodes() {\n        return this._nodes\n    }\n\n    addNode(n) {\n        for (let node of this._nodes) {\n            if (node.nodeCid === n.nodeCid)\n                return\n        }\n        this._nodes.push(n)\n        this._size.to(Now.nodeRadius())\n    }\n\n    removeNode(n) {\n        for (let i = 0; i <= this._nodes.length; i++) {\n            if (this._nodes[i].nodeCid === n.nodeCid) {\n                this._nodes.splice(i, 1)\n                return\n            }\n        }\n    }\n\n    set file(file) {\n        this._file = file\n    }\n\n    get file() {\n        return this._file\n    }\n\n    get preview() {\n        return this._file.toString('utf-8')\n    }\n\n    get hasPreview() {\n        if (this._file)\n            return true\n        return false\n    }\n\n    get btn() {\n        return this._btn\n    }\n\n    get isHover() {\n        return this._isHover\n    }\n\n    setInteraction(onDown, onUp, onHover, onLeave, onMove) {\n\n        this._btn = UIButton.fromCircle(new Group(this._pt, this._size))\n        this._btn.on('down', (ui, pt) => {\n            let now = Date.now()\n            if (now - this._downTimestamps[this._downTimestamps.length - 1] > 400)\n\n                this._downTimestamps = [now]\n            else\n                this._downTimestamps.push(now)\n\n            let times = this._downTimestamps.length\n\n            onDown(pt, this, times)\n\n        })\n        this._btn.on('up', (ui, pt) => {\n            onUp(pt, this)\n        })\n        this._btn.onHover(\n            (ui, pt) => {\n                this._isHover = true\n                onHover(pt, this)\n            },\n            (ui, pt) => {\n                this._isHover = false\n                onLeave(pt, this)\n            })\n\n        this._btn.on('move',\n            (ui, pt) => {\n                if (this.isHover) {\n                    onMove(pt, this)\n                }\n            })\n\n        return this._btn\n    }\n\n}\n\n","export default class BurlSelection {\n    constructor(burl, node) {\n        this._burl = burl\n\n        this._node = node\n    }\n\n    get burl() {\n        return this._burl\n    }\n\n    get node() {\n        return this._node\n    }\n\n    get id() {\n\n        if (this.node)\n            return this._node.nodeCid\n        else\n            return this._burl.oid\n\n    }\n}","export default class OriginParents{\n    constructor(oid)\n    {\n        this._oid = oid\n        this._parents = []// they are always nodes\n    }\n\n    get oid (){\n        return this._oid\n    }\n\n    get parents (){\n        return this._parents\n    }\n\n    addParent(n)\n    {\n        this._parents.push(n)\n    }\n}","import CID from 'cids'\nconst events = require('events')\n\n\nexport default class IpfsController extends events.EventEmitter {\n    constructor() {\n        super()\n        this._isReady = false\n        this._ipfs = null\n    }\n\n    init(ipfs) {\n\n        if (!ipfs) {\n            console.warn('No ipfs yet...')\n            return\n        }\n\n        this._ipfs = ipfs\n\n        this._ipfs.id().then((id) => {\n            console.log('Peer id', id)\n\n            if (this.isJsIpfs(id)) {\n\n                if (this._ipfs.isOnline()) {\n                    this.onIpfsReady()\n                }\n                else {\n                    this.props.ipfs.on('start', () => {\n                        this.onIpfsReady()\n                    })\n                }\n            }\n            else {\n                this.onIpfsReady()\n            }\n        })\n    }\n\n    onIpfsReady() {\n        this._isReady = true\n        this.emit('ready')\n    }\n\n    get isReady() {\n        return this._isReady\n    }\n\n    isJsIpfs(ipfsId) {\n        if (ipfsId.agentVersion.indexOf('js') !== -1)\n            return true\n        return false\n    }\n\n    loadDag(cid, callback) {\n        this._ipfs.dag.get(cid, (error, result) => {\n            if (error) {\n                console.warn(\"ipfs.dag.get\", cid, error)\n                callback(null, cid)\n                return\n            }\n\n            let data = result.value\n            callback(data, cid)\n        })\n    }\n\n    loadFile(cid, callback) {\n        this._ipfs.files.cat(cid, (error, file) => {\n\n            if (error) {\n                console.warn(\"ipfs.files.cat...\", cid, error)\n                return\n            }\n\n            callback(file)\n\n        })\n    }\n\n    addIPLDObj(obj, callaback = () => { }) {\n        this._ipfs.dag.put(obj, { format: 'dag-cbor', hashAlg: 'sha2-256' }, (error, result) => {\n            if (error)\n                throw (error)\n            let cid = result.toBaseEncodedString()\n            callaback(cid)\n        })\n    }\n\n    getCodec(cidStr) {\n        let cidObj = new CID(cidStr)\n        return cidObj.codec\n    }\n\n    isDag(cid) {\n        let codec = this.getCodec(cid)\n\n        if (codec === 'dag-cbor' || codec === 'dag-pb')\n            return true\n        return false\n    }\n\n\n}\n","import { Pt, Group, Circle, World, Particle, UI } from 'pts';\nimport PtsCanvas from \"./PtsCanvas.jsx\"\nimport NodeType from './NodeType'\nimport Shape from './Shape'\nimport Paint from './Paint'\nimport Burl from './Burl'\nimport Now from './Now'\nimport BurlSelection from './BurlSelection'\nimport OriginParents from './OriginParents'\nimport IpfsController from './IpfsController'\n\nexport default class PtsRender extends PtsCanvas {\n\n    constructor(props) {\n        super(props);\n\n        this.start.worldIsReady = false\n        this.state.activeCids = {}\n        this.world = null\n\n        this.nodes = {}\n        this.burls = {}//a global index of burls cid:{pt,nodes[nid1,nid2],contentPreview}\n        this.parents = {}// index to keep track of each oid parents\n\n        this.borningNode = new Pt(0, 0)\n\n        this.selectedId = null\n        this.selectedRelation = undefined\n        this.selectedIdHistory = []\n        this.paint = {}\n        this.background = null\n\n        document.onkeydown = this.checkKey.bind(this)\n        this.onCanvasReady = this.onCanvasReady.bind(this)\n        this.onBurlDown = this.onBurlDown.bind(this)\n        this.onBurlUp = this.onBurlUp.bind(this)\n        this.onBurlHover = this.onBurlHover.bind(this)\n        this.onBurlLeave = this.onBurlLeave.bind(this)\n        this.onBurlMove = this.onBurlMove.bind(this)\n\n        this.ipfsController = new IpfsController()\n        this.onIpfsReady = this.onIpfsReady.bind(this)\n        this.ipfsController.on('ready', this.onIpfsReady)\n\n        this._ptsToDraw = []\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if ('zoom' in nextProps)\n            this.onZoomChange(nextProps.zoom)\n        \n        if('canReferenceNodes' in nextProps)\n            Now.canReferenceNodes = nextProps.canReferenceNodes\n        \n\n        if (JSON.stringify(nextProps.cids) === JSON.stringify(this.props.cids))\n            return\n\n        if (!this.state.worldIsReady)\n            return\n\n        if (!this.ipfsController.isReady)\n            return\n\n        this.setCids(nextProps.cids)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.ipfs && this.props.ipfs)\n            this.ipfsController.init(this.props.ipfs)\n    }\n\n    onCanvasReady() {\n        this.paint = new Paint(this.form)\n    }\n\n    onIpfsReady() {\n        this.setCids(this.props.cids)\n    }\n\n    setCids(cids) {\n        if (!this.state.worldIsReady)\n            return\n\n        if (!this.ipfsController.isReady)\n            return\n\n\n        for (let cid of cids) {\n\n            if (!this.burls[cid])\n                this.loadCID(cid)\n        }\n    }\n\n    loadCID(cid) {\n\n        //TODO: Check if is valid cid\n        if (!cid)\n            return\n\n        if (cid in this.state.activeCids)\n            return\n\n        this.newBurl(cid)\n\n        if (this.ipfsController.isDag(cid)) {\n            this.ipfsController.loadDag(cid, (data) => {\n\n                if (NodeType.isNode(data)) {\n                    this.onCidLoaded(cid)\n                    this.createNode(data, cid)\n                }\n                else {\n                    this.createIPLD(data, cid)\n                }\n            })\n        }\n\n        else {\n            console.log('Loading something else')\n            this.loadFile(cid, (file) => {\n                this.onCidLoaded(cid)\n                this.burls[cid].file = file\n            })\n        }\n    }\n\n    onCidLoaded(cid) {\n        this.addBurlToWorld(cid)\n        this.setActiveCids(this.props.cids)\n    }\n\n    addBurlToWorld(cid) {\n        let oid = cid\n        if (cid in this.nodes)\n            oid = this.nodes[cid].origin.link\n\n        let particle = this.burls[oid].pt\n        this.world.add(particle, oid)\n    }\n\n    createIPLD(data, cid) {\n\n        this.ipfsController.loadFile(cid, (file) => {\n            this.onCidLoaded(cid)\n            this.burls[cid].file = file\n        })\n    }\n\n    newBurl(oid) {\n        //Remove node burls will try to be created again\n        //TODO Should each node have its own pt reference?\n        if (this.nodes[oid])\n            return\n\n        if (this.burls[oid])\n            return\n\n        let initPt = Shape.randomPt(this.space.center)\n\n        if (this.props.borningNodeCid === oid)\n            initPt = this.props.borningNodePt\n\n        let pt = this.makeParticle(oid, initPt)\n\n        let b = new Burl(oid, pt)\n        this.burls[oid] = b\n\n        b.setInteraction(this.onBurlDown, this.onBurlUp, this.onBurlHover, this.onBurlLeave, this.onBurlMove)\n\n        let op = new OriginParents(oid)\n        this.parents[oid] = op\n\n        return b\n    }\n\n    makeParticle(oid, pt) {\n        let particle = new Particle(pt).size(Now.nodeArm());\n        return particle\n    }\n\n    createNode(data, nid) {\n        if (this.nodes[nid])\n            return\n\n        let n = new NodeType(data, nid)\n        this.nodes[nid] = n\n\n        let oid = n.origin.link\n        this.loadCID(oid)\n\n        let targets = n.targetCids\n        for (let tid of targets) {\n            this.loadCID(tid)\n            this.parents[tid].addParent(nid)\n        }\n\n        this.burls[oid].addNode(n)\n\n        //previosly created burl before node was loaded\n        this.removeBurl(nid)\n    }\n\n    removeBurl(oid) {\n        //return\n        if (Now.upSelection && Now.upSelection.burl.oid === oid)\n            Now.upSelection = null\n        if (Now.hoverSelection && Now.hoverSelection.burl.oid === oid)\n            Now.hoverSelection = null\n        if (Now.downSelection && Now.downSelection.burl.oid === oid)\n            Now.downSelection = null\n\n        try {\n            this.world.removeParticle(oid)\n        }\n        catch (err) {\n            console.error(\"Couldn't remove particle\", oid)\n        }\n\n        delete this.burls[oid]\n\n        /*\n        console.log('Particle Index', this.getParticleIndex(oid))\n\n        console.log('Nodes')\n        this.toAll(this.nodes, (obj, cid) => { console.log('   ', cid) })\n\n        console.log('Burls')\n        this.toAll(this.burls, (a, id) => { console.log('   ', id) })\n\n        console.log(\"Removed\", oid)\n        */\n    }\n\n\n    onBurlDown(pt, burl, times) {\n        let burlSelection = this.getBurlSelection(pt, burl)\n        if (times === 2) {\n            Now.dragSelection = burlSelection\n        }\n        Now.hoverSelection = burlSelection\n        Now.downSelection = burlSelection\n\n        // console.log('down', this.burls, this.nodes, this.getActiveCids(), this.props.cids)\n        //console.log('Active cids', this.getActiveCids())\n    }\n\n    onBurlUp(pt, burl) {\n        let burlSelection = this.getBurlSelection(pt, burl)\n        Now.hoverSelection = burlSelection\n        Now.upSelection = burlSelection\n        Now.dragSelection = null\n        this.checkBorningRelation()\n    }\n\n    onBurlHover(pt, burl) {\n        Now.hoverSelection = this.getBurlSelection(pt, burl)\n    }\n\n    onBurlLeave(pt, burl) {\n        Now.hoverSelection = null\n    }\n\n    onBurlMove(pt, burl) {\n        Now.hoverSelection = this.getBurlSelection(pt, burl)\n    }\n\n    getBurlSelection(pointer, burl) {\n\n        if(!this.props.canReferenceNodes)\n        {\n            return new BurlSelection(burl, null) \n        }\n\n        let closest = this.getClosestNodeRelationToPointer(pointer, burl)\n        let nearbyNode = closest.node\n        let nodeDistance = closest.distance\n        if (nodeDistance === null) {\n            return new BurlSelection(burl, null)\n        }\n        else {\n            let originDistance = pointer.$subtract(burl.pt).magnitude()\n            if (originDistance <= nodeDistance) {\n                return new BurlSelection(burl, null)\n            }\n            else {\n                return new BurlSelection(burl, nearbyNode)\n            }\n        }\n    }\n\n    getClosestNodeRelationToPointer(pointer, burl) {\n        let closestNode = null\n        let closestDistance = null\n\n        for (let n of burl.nodes) {\n            for (let r of n.relations) {\n                let opt = burl.pt\n                let tpt = this.getTargetPt(r.target.link)\n                let line = new Group(opt, tpt)\n                let circle = Circle.fromCenter(burl.pt, Now.nodeRadius())\n                let pts = Circle.intersectLine2D(circle, line)\n                for (let pt of pts) {\n                    let distance = pointer.$subtract(pt).magnitude()\n\n                    if (closestDistance == null) {\n                        closestDistance = distance\n                        closestNode = n\n                    }\n                    else {\n                        if (distance < closestDistance) {\n                            closestDistance = distance\n                            closestNode = n\n                        }\n                    }\n                }\n            }\n        }\n        return { node: closestNode, distance: closestDistance }\n    }\n\n    paintPt(pt) {\n        this._ptsToDraw.push(pt)\n    }\n\n    onZoomChange(zoom) {\n        Now.setZoom(zoom)\n        this.toAll(this.burls, (b) => { b.pt.radius = Now.nodeArm() })\n    }\n\n    start(space, bound) {\n        console.log('start')\n        this.world = new World(this.space.innerBound, 0.01, new Pt(0, 0));\n        this.setState({ worldIsReady: true })\n        this.setCids(this.props.cids)\n    }\n\n    resize() {\n        console.log('create')\n        //this.create();\n    }\n\n    addForces(n) {\n\n        for (let r of n.relations) {\n            //the attraction force will be proporcional to its distance\n            let oid = n.origin.link\n\n            if (!this.burls[oid])\n                return\n\n            let tid = this.getTargetFinalOrigin(r.target.link)\n            let opt = this.burls[oid].pt\n            let tpt = this.burls[tid].pt\n            //let tpt = this.getTargetPt(r.target.link)\n\n            let forceAmount = 1\n            let distance = opt.$subtract(tpt)\n            //negative so it attracts\n            let force = distance.$multiply(-1 * forceAmount)\n            opt.addForce(force)\n            //oposite force is added to the destination pt\n            tpt.addForce(force.multiply(-1))\n        }\n    }\n\n    getTargetPt(id) {\n        if (this.burls[id])\n            return this.burls[id].pt\n        if (this.nodes[id])\n            return this.getTargetPt(this.nodes[id].origin.link)\n    }\n\n    getTargetFinalOrigin(id) {\n        if (this.burls[id])\n            return id\n        if (this.nodes[id])\n            return this.getTargetFinalOrigin(this.nodes[id].origin.link)\n    }\n\n    paintNodeTree(n) {\n        let opt = this.burls[n.origin.link].pt\n        this.paint.bubbleOutline(opt, Now.nodeRadius(), '#f3f')\n\n        for (let r of n.relations) {\n            let tid = r.target.link\n            let tpt = this.getTargetPt(tid)\n            this.paint.arrow(opt, tpt, 0, 0, '#f3f')\n\n            if (this.nodes[tid]) {\n                this.paintNodeTree(this.nodes[tid])\n            }\n            else {\n                this.paint.bubbleOutline(tpt, Now.originRadius(), '#f3f')\n            }\n        }\n    }\n\n    action(type, px, py) {\n        Now.updateAction(type)\n        this.toAll(this.burls, (burl, oid) => {\n            UI.track([burl.btn], type, new Pt(px, py));\n        })\n    }\n\n    animate(time, ftime) {\n        let onlyActive = true\n        this.moveDragBurl()\n   \n        if (this.props.autoLayout) {\n            this.toAll(this.nodes, this.addForces.bind(this), onlyActive)\n            this.world.update(ftime)\n        }\n\n        this.paintBorningNode()\n\n        this.paintAll()\n        this.paintFocusTree(Now.hoverSelection)\n        this.paintBorningRelation()\n        if (this.props.isDebug===true) {\n            this.world.drawParticles((p, i) => { this.form.strokeOnly('#9993').point(p, p.radius, \"circle\") });\n        }\n\n        /*for (let pt of this._ptsToDraw)\n            this.paint.bubble(pt, 10, '#f36')\n        this._ptsToDraw = []*/\n    }\n\n    moveDragBurl() {\n        if (Now.dragSelection)\n            Now.dragSelection.burl.pt.to(this.space.pointer)\n    }\n\n    toAll(obj, fnc, onlyActive = false) {\n        for (let cid in obj) {\n            if (!obj.hasOwnProperty(cid))\n                continue\n            if (onlyActive)\n                if (this.state.activeCids[cid] === false)\n                    continue\n\n            fnc(obj[cid], cid)\n        }\n    }\n\n    checkBorningRelation() {\n        if (!Now.downSelection || !Now.upSelection)\n            return\n\n        if (Now.downSelection.burl.oid === Now.upSelection.burl.oid)\n            return\n\n        //We assume only one relation per target and no type, for now\n        if (Now.downSelection.node && Now.downSelection.node.hasTarget(Now.upSelection.burl.oid))\n            return\n\n        this.addRelation(Now.downSelection, Now.upSelection)\n    }\n\n    addRelation(originSelection, targetSelection) {\n\n        this.getBurlSelectionId(targetSelection, (tid) => {\n            if (originSelection.node) {\n                this.addRelationToNode(originSelection.node, tid)\n            }\n            else {\n                this.addRelationToContent(originSelection.burl.oid, tid)\n            }\n        })\n    }\n\n    addRelationToNode(node, tid, typeId) {\n        let newNode = node.addRelationFork(tid, typeId)\n        this.updateNode(node, newNode.toObj())\n    }\n\n    addRelationToContent(oid, tid, typeId) {\n        let newNode = NodeType.getNewObj(oid, [tid])\n        this.props.onNewNode(newNode)\n    }\n\n    getBurlSelectionId(burlSelection, callback) {\n        //If there is no node, returns cid, otherwise gets node hash\n        if (burlSelection.node)\n            this.ipfsController.addIPLDObj(burlSelection.node.toObj(), callback)\n        else\n            callback(burlSelection.burl.oid)\n    }\n\n    //TODO These shouldn't be necessaries if we rely on activeNodes\n    replaceBurlNode(burl, oldNode, newNode) {\n        burl.removeNode(oldNode)\n        burl.addNode(newNode)\n    }\n\n    //TODO These shouldn't be necessaries if we rely on activeNodes    \n    /*replaceNode(oldNode, newNode) {\n        delete this.nodes[oldNode.nodeCid]\n        this.nodes[newNode.nodeCid] = newNode\n    }*/\n\n    updateNode(oldNode, newNodeObj) {\n\n        //add the newNode\n        this.ipfsController.addIPLDObj(newNodeObj, (newNid) => {\n            let newNode = new NodeType(newNodeObj, newNid)\n            this.props.onReplaceCid(oldNode.nodeCid, newNode.nodeCid)\n\n            //siblings update\n            let burl = this.burls[oldNode.origin.link]\n            this.replaceBurlNode(burl, oldNode, newNode)\n\n            //this.replaceNode(oldNode, newNode)\n\n            //parents update\n            let oldNodeParents = this.parents[oldNode.nodeCid].parents\n            for (let oldParentNid of oldNodeParents) {\n                let oldParent = this.nodes[oldParentNid]\n                let oldParent2 = oldParent.removeRelationFork(oldNode.nodeCid)\n                let newParent = oldParent2.addRelationFork(newNid)\n                this.updateNode(oldParent, newParent.toObj())\n            }\n        })\n    }\n\n\n    bubbleUpUpdate(sonOldNid, sonNewNid) {\n        this.props.onReplaceCid(sonOldNid, sonNewNid)\n\n        let originParents = this.parents[sonOldNid]\n\n        if (!originParents)\n            throw (new Error('node with no origin parent object, this should not happen..', sonOldNid))\n\n        for (let parentNid of originParents.parents) {\n            let parentNode = this.nodes[parentNid]\n            let removedTargetFork = parentNode.removeRelationFork(sonOldNid)\n            let addedTargetFork = removedTargetFork.addRelationFork(sonNewNid)\n\n            let newNode = addedTargetFork.toObj()\n            this.ipfsController.addIPLDObj(newNode, (newNid) => {\n                this.ipfsController.addIPLDObj(parentNode.toObj(), (oldNid) => {\n                    let burl = this.burls[parentNode.oid]\n                    this.replaceBurlNode(burl, parentNode, newNode)\n                    this.bubbleUpUpdate(oldNid, newNid)\n                })\n            })\n        }\n    }\n\n    //state changes >> update nodes \n    //animate >> update \n    setActiveCids(rootCids) {\n        let prevActiveCids = this.state.activeCids\n        this.toAll(prevActiveCids, (obj, cid) => { prevActiveCids[cid] = false })\n\n        let allCids = prevActiveCids\n\n        for (let cid of rootCids) {\n            allCids = Object.assign(allCids, this.getLeaveCids(cid))\n        }\n\n        this.setState({ activeCids: allCids })\n    }\n\n    getLeaveCids(rootCid) {\n        let cids = {}\n        cids[rootCid] = true\n        if (this.nodes[rootCid]) {\n            let n = this.nodes[rootCid]\n            cids[n.origin.link] = true\n            this.toAll(n.relations, (r) => {\n                let tid = r.target.link\n                cids = Object.assign(cids, this.getLeaveCids(tid))\n            })\n        }\n        return cids\n    }\n\n    paintBorningNode() {\n        if (this.props.borningNodeText != null) {\n            this.paint.bubble(this.props.borningNodePt, Now.originRadius(), '#eee')\n            if (this.props.borningNodeText) {\n                this.paint.text(this.props.borningNodeText, this.props.borningNodePt, Now.originRadius() * 1.5)\n            }\n            else {\n                this.paint.text(\"What's in your mind?\", this.props.borningNodePt, Now.originRadius() * 1.5, '#333')\n            }\n        }\n    }\n\n    paintBorningRelation() {\n        if (!Now.isPressing)\n            return\n\n        if (!Now.downSelection)\n            return\n\n        let opt = Now.downSelection.burl.pt\n        let tpt = this.space.pointer\n\n        let targetRadius = 0\n\n        if (Now.hoverSelection) {\n            tpt = Now.hoverSelection.burl.pt\n            targetRadius = Now.hoverSelection.id in this.nodes ? Now.nodeRadius() : Now.originRadius()\n            //this.paint.bubbleOutline(opt, targetRadius, '#f36')\n        }\n\n        let originRadius = Now.downSelection.id in this.nodes ? Now.nodeRadius() : Now.originRadius()\n\n        this.paint.bubbleOutline(opt, originRadius, '#f36')\n        this.paint.arrow(opt, tpt, originRadius, targetRadius, '#f36')\n    }\n\n    selectNewId(newId) {\n        if (!this.burls[newId].pt)\n            return\n\n        if (this.selectedIdHistory[this.selectedIdHistory.length - 1] !== newId) {\n            this.selectedIdHistory.push(newId)\n        }\n        this.selectedId = newId\n        this.selectedRelation = null\n    }\n\n    selectPreviousId() {\n        if (this.selectedRelation) {\n            this.selectedRelation = null\n            return\n        }\n        if (this.selectedIdHistory.length <= 1)\n            return\n        this.selectedIdHistory.pop()\n        this.selectedId = this.selectedIdHistory[this.selectedIdHistory.length - 1]\n    }\n\n    selectNextRelation(jumps) {\n        let currentN = this._nodes[this.selectedId]\n        if (!currentN)\n            return\n\n        let currentIndex = this.getRelationIndex(currentN, this.selectedRelation)\n        if (currentIndex === undefined) {\n            if (currentN.relationships)\n                this.selectedRelation = currentN.relationships[0].destinationNode\n            return\n        }\n\n        let nextIndex = (currentIndex + jumps) % currentN.relationships.length\n        if (nextIndex < 0)\n            nextIndex = currentN.relationships.length + nextIndex\n\n        let relationship = currentN.relationships[nextIndex]\n        if (relationship)\n            this.selectedRelation = relationship.destinationNode\n    }\n\n    getRelationIndex(n, tid) {\n        return n.relations.findIndex((r) => {\n            return r.link === tid\n        })\n    }\n\n    checkKey(e) {\n\n        e = e || window.event;\n\n        if (e.keyCode === '38') {//up arrow\n            this.selectNewId(this.selectedRelation)\n        }\n        else if (e.keyCode === '40') {// down arrow\n            this.selectPreviousId()\n        }\n        else if (e.keyCode === '37') {// left arrow\n            this.selectNextRelation(-1)\n\n        }\n        else if (e.keyCode === '39') {// right arrow\n            this.selectNextRelation(1)\n        }\n    }\n\n    treeDown(cid, level = 1, onNode = () => { }, onContent = () => { }, onRelation = () => { }) {\n\n        if (!cid)\n            throw (new Error(\"No cid on tree down\"))\n\n        if (!this.nodes[cid]) {\n            onContent(cid, level)\n            return\n        }\n\n        let n = this.nodes[cid]\n\n        for (let r of n.relations) {\n            onRelation(n, r, level)\n        }\n\n        onNode(n, level)\n        onContent(n.origin.link, level)\n\n        level++\n        for (let r of n.relations) {\n\n            this.treeDown(r.target.link, level, onNode, onContent, onRelation)\n\n        }\n\n    }\n\n    paintFocusTree(burlSelection) {\n        let that = this\n        function onNode(n, level) {\n            let scaleFactor = 1\n            let pt = that.burls[n.origin.link].pt\n            that.paint.bubbleOutline(pt, Now.nodeRadius() * scaleFactor, '#f36')\n        }\n\n        function onRelation(n, r, level) {\n            let scaleFactor = 1\n            let opt = that.burls[n.origin.link].pt\n            let tpt = that.getTargetPt(r.target.link)\n            let targetIsNode = r.target.link in that.nodes\n            let targetRadius = targetIsNode ? Now.nodeRadius() : Now.originRadius()\n            that.paint.arrow(opt, tpt, Now.nodeRadius() * scaleFactor, targetRadius, '#f36')\n        }\n\n        function onContent(cid, level) {\n            let b = that.burls[cid]\n            let scaleFactor = 1\n            if (b.hasPreview) {\n                that.paint.bubbleOutline(b.pt, Now.originRadius() * scaleFactor, '#f36')\n                that.paint.text(b.preview, b.pt, Now.originRadius() * 1.5 * scaleFactor, '#8B4B62')\n            } else {\n                that.paint.bubbleOutline(b.pt, Now.originRadius() * scaleFactor, '#f36')\n                that.paint.text(b.oid, b.pt, Now.originRadius() * 1.5 * scaleFactor, '#BB6F6B88', false)\n            }\n        }\n\n        if (burlSelection) {\n            that.treeDown(burlSelection.id, 1, onNode, onContent, onRelation)\n        }\n    }\n\n    paintAll() {\n        let that = this\n        function onNode(n, level) {\n\n            if(!that.props.canReferenceNodes)\n                return\n\n            let pt = that.burls[n.origin.link].pt\n            that.paint.bubbleOutline(pt, Now.nodeRadius(), '#999')\n        }\n\n        function onRelation(n, r, level) {\n            let opt = that.burls[n.origin.link].pt\n            let tpt = that.getTargetPt(r.target.link)\n            let targetIsNode = r.target.link in that.nodes\n            let targetRadius = targetIsNode ? Now.nodeRadius() : Now.originRadius()\n            that.paint.arrow(opt, tpt, Now.nodeRadius(), targetRadius, '#999')\n        }\n\n        function onContent(cid, level) {\n            let b = that.burls[cid]\n\n            if (!b) {\n                console.warn('no burl for content', cid)\n                return\n                //throw(new Error(\"no burl for content\", cid))\n            }\n            if (b.hasPreview) {\n                that.paint.bubble(b.pt, Now.originRadius(), '#fff8')\n                that.paint.bubbleOutline(b.pt, Now.originRadius(), '#999')\n                that.paint.text(b.preview, b.pt, Now.originRadius() * 1.5, '#999')\n            } else {\n                that.paint.bubble(b.pt, Now.originRadius(), '#fff8')\n                that.paint.bubbleOutline(b.pt, Now.originRadius(), '#999')\n                that.paint.text(b.oid, b.pt, Now.originRadius() * 1.5, '#9999', false)\n            }\n        }\n\n        this.bubbleDownFromCids(this.props.cids, onNode, onContent, onRelation)\n    }\n\n    bubbleDownFromCids(cids, onNode, onContent, onRelation) {\n        for (let cid of cids)\n            this.treeDown(cid, 1, onNode, onContent, onRelation)\n    }\n\n    getActiveCids() {\n        let activeCids = []\n        for (let cid in this.state.activeCids) {\n            if (!this.state.activeCids.hasOwnProperty(cid))\n                continue\n            if (this.state.activeCids[cid] === true)\n                activeCids.push(cid)\n\n        }\n        return activeCids\n    }\n\n}\n","import React from 'react'\n\nexport default class InvisibleInput extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            text: '...',\n        }\n        document.onkeydown = this.checkKey.bind(this)\n    }\n\n    checkKey(e) {\n        e = e || window.event\n\n        if (!this.isMobileOrTablet()) {\n            if (e.keyCode === 13 && e.shiftKey) {\n                return\n            }\n        }\n\n        if (e.keyCode === 13) {\n            if (this.props.onReturn)\n                this.props.onReturn(this.props.text)\n        }\n    }\n\n    isMobileOrTablet() {\n        var check = false;\n        (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n        return check;\n      };\n\n    onChange(e) {\n        let newText = e.target.value\n        this.props.onChange(newText)\n    }\n\n    getZIndex(hide) {\n        if (hide)\n            return -1\n        return 'auto'\n    }\n\n    render() {\n\n        return (\n            <div style={{ position: 'relative', zIndex: this.getZIndex(this.props.hide) }}>\n                <div style={{ position: 'absolute' }}>\n                    <textarea\n                        ref={(input) => { this.nameInput = input }}\n                        value={this.props.text}\n                        onChange={this.onChange.bind(this)}\n                        autoFocus={true}\n                    />\n                </div>\n            </div >\n        )\n    }\n}\n\n","import React, { Component } from 'react'\nimport IPLDRender from './PtsRender'\nimport InvisibleInput from './InvisibleInput'\nimport getIpfs from 'window.ipfs-fallback'\n\nimport QueryString from 'query-string'\n\nvar Buffer = require('buffer/').Buffer\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pauseAnimation: false,\n            currentZoom: 1,\n            lastZoom: 1,\n            borningNodeText: null,\n            borningNodePt: null,\n            cids: [],\n            ipfs: null,\n\n            autoLayout: false,\n            isDebug: false,\n            src: '',\n            canReferenceNodes: true\n        }\n\n        this.replaceCid = this.replaceCid.bind(this)\n        this.addNode = this.addNode.bind(this)\n        this.addTextOrigin = this.addTextOrigin.bind(this)\n        this.resolveIPNS = this.resolveIPNS.bind(this)\n        this.onHashChanged = this.onHashChanged.bind(this)\n\n        getIpfs()\n            .then((ipfs) => {\n                console.warn('Got IPFS')\n                /*ipfs.id().then((peer) => {\n                    this.resolveIPNS(peer.id)\n                })*/\n                this.setState({ ipfs: ipfs })\n                this.checkHash()\n            })\n            .catch((error) => console.error)\n\n        window.addEventListener('hashchange', this.onHashChanged, false);\n    }\n\n    componentDidMount(){\n        this.onHashChanged()\n    }\n\n    onHashChanged() {\n        this.checkHash()\n    }\n\n    checkHash() {\n        let parsedHash = QueryString.parse(window.location.hash)\n        this.loadProperties(parsedHash)\n    }\n\n    loadProperties(p) {\n        let autoLayout = true\n        let isDebug = false\n        let canReferenceNodes = true\n\n        if ('src' in p)\n            this.loadSrc(p.src)\n        if ('autoLayout' in p)\n            autoLayout = (p.autoLayout === 'true') //we want true and not \"true\"\n        if ('isDebug' in p)\n            isDebug = (p.isDebug === 'true')\n        if ('canReferenceNodes' in p)\n            canReferenceNodes = (p.canReferenceNodes === 'true')\n\n        this.setState({ autoLayout: autoLayout, isDebug: isDebug, canReferenceNodes:canReferenceNodes })\n    }\n\n    loadSrc(cid) {\n        if (this.state.ipfs) {\n            this.loadDag(cid, (data) => {\n\n                this.setState({ cids: data.cids })\n            })\n        }\n    }\n\n    addTextOrigin(text, onAdded = () => { }) {\n\n        let file = {\n            path: 'origin.txt',\n            content: Buffer.from(text, 'utf8')\n        }\n\n        if(!this.state.ipfs)\n        {\n            console.warn('Loading IPFS')\n            return\n        }\n        \n        this.state.ipfs.files.add(file, (error, result) => {\n            if (error)\n                throw (error)\n\n            let cid = result[0].hash\n            //this.publishToIPNS(cid)\n\n            onAdded(cid)\n        })\n    }\n\n    replaceCid(cidToRemove, cidToAdd) {\n\n        let index = this.state.cids.indexOf(cidToRemove)\n        if (index === -1)\n            return\n\n        let cids = [...this.state.cids]\n        cids.splice(index, 1, cidToAdd)\n        this.setState({ cids: cids })\n    }\n\n    addNode(obj) {\n        this.addIpldObj(obj, (cid) => {\n            this.addCID(cid)\n        })\n    }\n\n    addIpldObj(obj, callback) {\n        this.state.ipfs.dag.put(obj, { format: 'dag-cbor', hashAlg: 'sha2-256' }, (error, result) => {\n            if (error)\n                throw (error)\n            let cid = result.toBaseEncodedString()\n            callback(cid)\n        })\n    }\n\n    save() {\n        let obj = {}\n        obj.cids = [...this.state.cids]\n        this.addIpldObj(obj, (cid) => {\n            this.setState({ src: cid })\n            this.makeHash()\n        })\n    }\n\n    makeHash() {\n        let hashObj = {}\n        hashObj.src = this.state.src\n        hashObj.autoLayout = this.state.autoLayout\n        hashObj.canReferenceNodes = this.state.canReferenceNodes\n        hashObj.isDebug = this.state.isDebug\n        let newHash = QueryString.stringify(hashObj)\n        window.location.hash = newHash\n    }\n\n    addCID(cid) {\n\n        if (this.state.cids.indexOf(cid) === -1) {\n            this.setState({ cids: [...this.state.cids, cid] })\n        }\n        else {\n            console.log('cid exists already', cid)\n        }\n\n        this.save()\n    }\n\n    publishToIPNS(cid) {\n        let that = this\n        this.state.ipfs.name.publish(cid, function (err, res) {\n            console.log(res)\n            if (!res)\n                return\n            // You now receive a res which contains two fields:\n            //   - name: the name under which the content was published.\n            //   - value: the \"real\" address to which Name points.\n            console.log(`https://gateway.ipfs.io/ipns/${res.name}`)\n\n            that.state.ipfs.name.resolve(res.name, function (err, name) {\n                console.log('resolving', name)\n                // /ipfs/QmQrX8hka2BtNHa8N8arAq16TCVx5qHcb46c5yPewRycLm\n            })\n        })\n    }\n\n    resolveIPNS(ipns) {\n        let that = this\n        this.state.ipfs.name.resolve(ipns, function (err, result) {\n            console.log('IPNS resolved', result)\n            if (!result || !result.path)\n                return\n            let cid = result.path.replace('/ipfs/', '')\n            console.log(cid)\n            that.addCID(cid)\n        })\n    }\n\n    handleChange(event) {\n        this.setState({ variance: event.target.value });\n    }\n\n    handleClick(event) {\n        //this.setState({ pauseAnimation: !this.state.pauseAnimation });\n    }\n\n    onPinchStart(e) {\n        this.setState({ lastZoom: this.state.currentZoom })\n    }\n\n    onPinchMove(e) {\n        let zoomDelta = e.zoom\n        let currentZoom = this.state.lastZoom * zoomDelta\n        this.setState({ currentZoom: currentZoom })\n    }\n\n    onPressStart(mousePosition) {\n        // this.setState({ hasFocus: false })\n    }\n\n    onLongPressStart(mousePosition) {\n        this.setState({\n            borningNodeText: '',\n            borningNodePt: mousePosition,\n            cid: null\n        })\n    }\n\n    onLongPressEnd(mousePosition) {\n        this.setState({ hasFocus: true })\n    }\n\n    onInputChange(value) {\n\n        this.setState({ borningNodeText: value })\n    }\n\n    onInputReturn(text) {\n        if (text) {\n            this.addTextOrigin(text, (cid) => {\n                this.setState({ borningNodeCid: cid })\n                this.addCID(cid)\n            })\n        }\n        this.setState({ hasFocus: false, borningNodeText: null })\n    }\n\n    getInvisibleInput() {\n        return <InvisibleInput\n            onChange={this.onInputChange.bind(this)}\n            onReturn={this.onInputReturn.bind(this)}\n            text={this.state.borningNodeText}\n            hide={!this.state.isDebug} />\n    }\n\n\n    loadDag(cid, callback) {\n        this.state.ipfs.dag.get(cid, (error, result) => {\n            if (error) {\n                console.warn(\"ipfs.dag.get\", cid, error)\n                callback(null, cid)\n                return\n            }\n\n            let data = result.value\n            callback(data, cid)\n        })\n    }\n\n    render() {\n        let invisibleInput = (<div />)\n        if (this.state.hasFocus)\n            invisibleInput = this.getInvisibleInput()\n\n\n        return (\n            <div\n                className=\"App\"\n                style={{ touchAction: 'none' }}\n                onClick={this.handleClick.bind(this)}>\n\n                {invisibleInput}\n                <div><IPLDRender\n                    ipfs={this.state.ipfs}\n                    cids={this.state.cids}\n                    name=\"IPLDRender\"\n                    background=\"#fff\"\n                    onPinchStart={this.onPinchStart.bind(this)}\n                    onPinchMove={this.onPinchMove.bind(this)}\n                    onLongPressStart={this.onLongPressStart.bind(this)}\n                    onLongPressEnd={this.onLongPressEnd.bind(this)}\n                    onPressStart={this.onPressStart.bind(this)}\n                    longPressDelay={500}\n                    borningNodeText={this.state.borningNodeText}\n                    borningNodePt={this.state.borningNodePt}\n                    borningNodeCid={this.state.borningNodeCid}\n                    onNewNode={this.addNode}\n                    onReplaceCid={this.replaceCid}\n                    zoom={this.state.currentZoom}\n                    loop={true}\n                    autoLayout={this.state.autoLayout}\n                    isDebug={this.state.isDebug}\n                    canReferenceNodes={this.state.canReferenceNodes}/>\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}